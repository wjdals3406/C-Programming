트리 : 부모-자식 관계의 노드들로 이루어짐
단말노드(terminal node = leaf node) : 자식이 없는 노드
비단말노드(nonterminal node) : 적어도 하나의 자식을 가지는 노드
레벨 : 트리의 각층의 번호(1레벨(부모 노드)에서부터 시작)
높이 : 트리의 최대 레벨
노드의 차수 : 노드가 가지고 있는 자식 노드의 개수
-> terminal node의 차수 = 0

트리의 종류 : 이진 트리, 일반 트리(자식 노드의 개수에 제한이 없음)

트리 : 한 개 이상의 노드로 이루어진 유한 집합
이진 트리 : 모든 노드가 2개의 서브 트리를 가지고 있는 트리

<이진 트리>
- 일반 트리와 구별되는 점 : 
    - 이진 트리의 서브트리는 공집합일 수 있음 -> 노드가 하나도 없을 수 있음
    - 이진 트리에는 서브 트리간의 순서가 존재
- 이중연결리스트로 구현
- 모든 노드의 차수가 2 이하가 된다 -> 구현하기가 편리함
- 이진트리의 노드에는 최대 2개까지의 자식 노드가 존재

[이진트리의 성질] 
- node의 개수 : n ->  edge의 개수 : n-1
- 높이를 알면 최소 노드와 최대 노드의 수를 알 수 있음
- 높이 : h -> 노드 최소 h개, 최대 2^h - 1개
- 노드 : n -> 높이 최대 n개, 최소 [log2(n+1)] * []는 올림 연산

최소 노드 개수를 13개를 하고 싶다면,
최소 높이는 4, 최대 높이는 13

노드 수가 n일때, 최소 높이는 log2(n+1)의 값을 구하면 됨

포화 이진 트리 : 터미널 노드를 제외한 나머지 노드는 모두 자식이 2개
    - 높이가 k ->  노드의 수: 2*k - 1

[완전 이진 트리] 
- 마지막 레벨을 제외한 나머지 레벨이 꽉 차있을 때(왼쪽부터 차있어야 함)
    - 포화 이진 트리는 완전 이진 트리에 속함
    - 최소 노드 수 : 2^(k-1)-1+1 = 2^k-1
    - 최대 노드 수 : 2^k - 1

기타 이진 트리 : 형식에 제한없는 이진 트리
노드의 수 = 높이 -> 경사진 이진트리

왼쪽 child가 짝수, 오른쪽 child는 홀수
나의 인덱스 번호에 2을 곱하고 하나 넘음

이진트리의 표현
- 배열 이용
- 포인터 이용